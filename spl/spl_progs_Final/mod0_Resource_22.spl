alias functionNum R1;

// ---- Aquire Disk Function (num = 3) -----
// Args: PID
if( functionNum == 3) then
    alias currentPID R2;
    // BUSY WAIT
    while([DISK_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
        multipush(R1, R2);
        // Scheduler 
		call SCHEDULER;
		multipop(R1, R2);
    endwhile;
    // Update Disk Status Table
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;
endif;

// ---- Acquire Semaphore Function (num = 6) -------
// Args: PID
if ( functionNum == 6 ) then
    alias currentPID R2;
    // Find a free Entry in the Semaphore Table
    alias cnt R5;
    cnt = 0;
    while( cnt < 32 ) do
        if([SEMAPHORE_TABLE + cnt*4 +1] == 0) then
            // Process Count = 1 and Locking Pid to -1, => not locked by any process, just acquired
            [SEMAPHORE_TABLE + cnt*4 +1] = 1;
            [SEMAPHORE_TABLE + cnt*4] = -1;
            R0=cnt;
            return;
        endif;
        cnt = cnt + 1;
    endwhile;
    // No free semaphore entry
    R0=-1;
    return;
endif;

// ---- Release Semaphore Function (num = 7) -------
// Args: Semaphore_Table_Index, PID
if ( functionNum == 7 ) then
    alias SEM_TABLE_INDEX R2;
    alias currentPID R3;

    alias cnt R5;
    // If the semaphore to be released (given by SEM_TABLE_INDEX) is locked by current process
    if([SEMAPHORE_TABLE + SEM_TABLE_INDEX*4] == currentPID) then
        // set Locking Pid to -1, Unlock
        [SEMAPHORE_TABLE + SEM_TABLE_INDEX*4] = -1;
        
        // Loop Process Table to WakeUp all Prcoesses blocked by this semaphore 
        cnt = 0;
        while( cnt < 16 ) do
            if([PROCESS_TABLE + cnt*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + cnt*16 + 5] == SEM_TABLE_INDEX) then
                [PROCESS_TABLE + cnt*16 + 4] = READY;
            endif;
            cnt = cnt + 1;
        endwhile;
    endif;

    // Decrement the Process Count in Semaphore Table for the Corresponding Semaphore Entry
    [SEMAPHORE_TABLE + SEM_TABLE_INDEX + 1] = [SEMAPHORE_TABLE + SEM_TABLE_INDEX + 1] - 1;
    return;
endif;


// ---- Aquire Terminal Function (num = 8) ------
// Args: PID
if( functionNum == 8 ) then
     alias currentPID R2;
    // wait in a loop, BUSY WAIT
    while([TERMINAL_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
        multipush(R1, R2);
        // Scheduler
		call SCHEDULER;
		multipop(R1, R2);
    endwhile;
    // Update Terminal Status Table
    [TERMINAL_STATUS_TABLE + 0] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
    // current process aquired the terminal now returns to the caller
    return;

endif;

// ---- Release Terminal Function (num = 9) -----
// Args: PID
if( functionNum == 9 ) then
     alias currentPID R2;
    // check if the process trying to release is using in first place
    if(currentPID == [TERMINAL_STATUS_TABLE + 1]) then
        // reset state in Terminal Status Table 
        [TERMINAL_STATUS_TABLE] = 0;
        // update STATE of all processes whose STATE was Waiting Terminal to Ready
        alias newPID R3;
		newPID = 1;
        while( newPID <= 15 ) do
            if( [PROCESS_TABLE + (newPID * 16) + 4] == WAIT_TERMINAL ) then
                [PROCESS_TABLE + (newPID * 16) + 4] = READY;
            endif;
            newPID = newPID + 1;
        endwhile;
        //assig
        // breakpoint;
        R0 = 0;
        return;
    else
        // Store -1 in the Return value
        R0 = -1;
		return;
    endif;
endif;