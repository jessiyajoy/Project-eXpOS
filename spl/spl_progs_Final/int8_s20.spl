//----  FORK SYCALL  --------------------------------------------------------
//----  Set MODE Flag and Switch Stack ------------------------
alias userSP R1;
userSP = SP; 
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 8;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13] = SP;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias childPID R2;
alias cnt R4;
alias parentPTBR R5;
parentPTBR = PTBR;

// ---- Call Get PCB Entry (Process Manager) ---------------- 
// Args: funNum = 1, no Args
multipush(R1, R2, R5);
R1 = 1;
call MOD_1;
multipop(R1, R2, R5);
childPID = R0;

// ---- If no space for new Process, (limit is 16) ----------------  
if(childPID == -1) then
    alias physicalAddrRetVal R3;
    physicalAddrRetVal = [parentPTBR + 2 * (userSP-1)/512] * 512 + ((userSP-1)%512);
    [physicalAddrRetVal] = -1;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    SP = userSP;
    ireturn;
endif;

// ---- Allocate the Heap for Parent, Get Free Page --------------------
if([parentPTBR + 4] == -1 || [parentPTBR + 5] == "0000") then
    multipush(R1, R2, R3, R4, R5);
    R1 = 1;
    call MOD_2;
    multipop(R1, R2, R3, R4, R5);
    [parentPTBR + 4] = R0;
    [parentPTBR + 5] = "0110";
    multipush(R1, R2, R3, R4, R5);
    R1 = 1;
    call MOD_2;
    [parentPTBR + 6] = R0;
    [parentPTBR + 7] = "0110";
    multipop(R1, R2, R3,R4, R5);
endif;

// ---- Stack for Child Process, calling Get Free Page function ------------
alias childPTBR R3;
childPTBR = PAGE_TABLE_BASE + childPID * 20;

// Aux Info Same as Parent's
multipush(R1,R2,R3,R4,R5);
R1 = 1;
call MOD_2;
[childPTBR + 16] = R0;
[childPTBR + 17] = [parentPTBR + 17];
multipop(R1, R2, R3, R4, R5);
multipush(R1, R2, R3, R4, R5);
R1 = 1;
call MOD_2;
[childPTBR + 18] = R0;
[childPTBR + 19] = [parentPTBR + 19];
multipop(R1,R2,R3,R4,R5);

// ---- UArea Page for Child Process, Get Free Page again
// Store it in Process Table 11th offset
alias UAreaPage R7;
multipush(R1, R2, R3,R4, R5);
R1 = 1;
call MOD_2;
UAreaPage = R0;
[PROCESS_TABLE + childPID * 16 + 11] = R0;
multipop(R1, R2, R3,R4, R5);

// ---- Process Table for Child Process ----------------------------------------
//---- userId 
[PROCESS_TABLE + childPID * 16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3];
//---- Swap Flag
[PROCESS_TABLE + childPID * 16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 6];
//---- UserArea Swap Status
[PROCESS_TABLE + childPID * 16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 10];
//---- Inode Index
[PROCESS_TABLE + childPID * 16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7];
//---- UPTR
[PROCESS_TABLE + childPID * 16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
//---- Mode Flag
[PROCESS_TABLE + childPID * 16 + 9] = 0;
//---- KPTR
[PROCESS_TABLE + childPID * 16 + 12] = 0;
//---- Tick
[PROCESS_TABLE + childPID * 16 + 0] = 0;
//---- PPID
[PROCESS_TABLE + childPID * 16 + 2] = [SYSTEM_STATUS_TABLE + 1];
//---- STATE
[PROCESS_TABLE + childPID * 16 + 4] = CREATED;

// ---- Per Process Resource Table for Child Process Copy from Parent ------------
cnt = 0;
while( cnt < 16 ) do
    [[PROCESS_TABLE + childPID * 16 + 11]*512 + 496 + cnt] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512 + 496 + cnt];
    cnt = cnt + 1;
endwhile;

// ---- Per Process Disk Map Table for Child Process Copy from Parent --------------
cnt = 0;
while( cnt < 10) do
    [DISK_MAP_TABLE + childPID * 10 + cnt] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + cnt];
    cnt = cnt + 1;
endwhile;

// ---- PAGE TABLE FOR CHILD PROCESS ---------------------------
childPTBR = PAGE_TABLE_BASE + childPID * 20;
// Library, Heap and Code copy from Parent, Stack has been Already set up above
// If any of them shared, increment Mem_Free_List entry for it
cnt = 0;
while(cnt < 16) do
	[childPTBR + cnt] = [parentPTBR + cnt];
	if( cnt%2 == 0 && [childPTBR + cnt] != -1 ) then
		[MEMORY_FREE_LIST + [childPTBR + cnt]] = [MEMORY_FREE_LIST + [childPTBR + cnt]] + 1;
	endif;
	cnt = cnt + 1;
endwhile;

// ----- Copy Contents of User Stack Pages of Parent to Child, word-by-word --------
// ---- Two Pages to Copy, 512 (Pg.8) + 512 (Pg.9) -----
cnt = 0;
while(cnt < 512) do
	[[childPTBR + 16]*512 + cnt] = [[parentPTBR + 16] * 512 + cnt];
	[[childPTBR + 18]*512 + cnt] = [[parentPTBR + 18] * 512 + cnt];
	cnt = cnt + 1;
endwhile;

//----- BP placed in start of Kernel Stack of Child Process --------------------
[UAreaPage*512] = BP; 

//---- Set Up the Return Values in Parent and Child --------------------------
alias physicalAddrRetVal R9;

// Parent
physicalAddrRetVal = [parentPTBR + 2 * (userSP-1)/512] * 512 + ((userSP-1)%512);
[physicalAddrRetVal] = childPID;

// Child
physicalAddrRetVal = [childPTBR + 2 * (userSP-1)/512] * 512 + ((userSP-1)%512);
[physicalAddrRetVal] = 0;

// Mode Flag Parent Reset, Returning is to Parent, child will have to be scheduled
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 9] = 0;
SP = userSP;
ireturn;
