alias functionNum R1;
alias PID R2;

alias processEntry R7;
processEntry = PROCESS_TABLE + PID*16;
// ----- Get PCB Entry (funNum = 1) -----------
if(functionNum == 1) then
    alias cnt R10;
    // Loop the process table to find free space and if found, set it up
    cnt = 0;
    alias processEntry1 R9;
    while( cnt < 16 ) do
        processEntry1 = PROCESS_TABLE + cnt*16;
        if([processEntry1 + 4] == TERMINATED) then
            // Set PID to index
            [processEntry1 + 1] = cnt;
            // Set State
            [processEntry1 + 4] = ALLOCATED;
            // Set PTBR and PTLR fields
            [processEntry1 + 14] = PAGE_TABLE_BASE + cnt*20;
            [processEntry1+ 15] = 10;
            R0 = cnt;
            return;
        endif;
        cnt = cnt + 1;
    endwhile;
    R0 = -1;
    return;
endif;

// ----- Free User Area Page (funNum = 2) -----
if(functionNum == 2) then
    // Loop the Per Process Resource Table and calling Release Semaphore (Resource Manager) for every Valid Entry
    alias cnt R5;
    cnt = 0;
    while( cnt < 8) do
        // If valid entry
        if([[processEntry + 11] * 512 + 496 + 2*cnt] != -1) then
            // if it's a FILE 
            if([[processEntry + 11] * 512 + 496 + 2*cnt] == FILE) then
                //--- Call Close() from File Manager Module -----
                // args: funNum(4), Open File Table Index
                // returns: NIL
                multipush(R1,R2,R5);
                    R1 = 4;
                    R2 = [[processEntry+ 11] * 512 + 496 + 2*cnt + 1];
                    call FILE_MANAGER;
                multipop(R1,R2,R5);
            endif;
            // If it's a Semaphore
            if([[PROCESS_TABLE + PID * 16 + 11] * 512 + 496 + 2*cnt] == 1) then
                // calling Release Semaphore Function (Resource Manager)
                multipush(R1,R2,R5,R7);
                R3 = PID;
                R1 = 7;
                R2 = [[processEntry+ 11] * 512 + 496 + 2*cnt + 1];
                call MOD_0;
                multipop(R1,R2,R5,R7);
            endif;
            // Invalidate the entry
            [[processEntry+ 11] * 512 + 496 + 2*cnt] = -1;
        endif;
        cnt = cnt + 1;
    endwhile;

    // calling Release Page (2), Args: funNum, User Area Page Number to free (get from Process Table)
	multipush(R1,R2,R5,R7);
	R1 = 2;
	R2 = [processEntry + 11];
	call MOD_2;
	multipop(R1,R2,R5,R7);
	return;
endif;

// ----- Exit Process (funNum = 3) ----
if(functionNum == 3) then

    // Loop through Process Table Entries and Set to Ready and Mark Orphan Appropriately
    // NOT VALID when called through EXEC
    if([processEntry + 9] != 9) then
        alias cnt R5;
        cnt = 0;
        alias processEntry1 R9;
        while( cnt < 16 ) do
            processEntry1 = PROCESS_TABLE + cnt*16;
            if([processEntry1 + 4] == WAIT_PROCESS && [processEntry1 + 5] == PID) then
                [processEntry1 + 4] = READY;
            endif;
            if([processEntry1 + 2] == PID) then
                [processEntry1 + 2] = -1;
            endif;
            cnt = cnt + 1;
        endwhile;
    endif;

    // Free Page Table (4), ARGS: funNum, PID
	multipush(R1,R2,R5,R7);
	R1 = 4;
	R2 = PID;
	call MOD_1;
	multipop(R1,R2,R5,R7);
    // Free User Area Page, ARGS: funNum, PID
	multipush(R1,R2,R5,R7);
	R1 = 2;
	R2 = PID;
	call MOD_1;
	multipop(R1,R2,R5,R7);
    // Set State
	[processEntry + 4] = TERMINATED;
	return;

endif;

// ---- Free Page Table (funNum = 4) ----
if(functionNum == 4) then
    PTBR = PAGE_TABLE_BASE + PID*20;

    // Library Invalidated
    [PTBR + 0] = -1;
	[PTBR + 1] = "0000";
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";

    // Heap, Code, Stack Freed
    alias counter R4;
    counter = 4;
    while(counter<20) do
        if([PTBR + counter] != -1) then
            // calling Release Page
            multipush(R1,R2,R4);
            R1 = 2;
            R2 = [PTBR + counter];
            call MOD_2;
            [PTBR + counter] = -1;
            [PTBR + counter+1] = "0000";
            multipop(R1,R2,R4);
        endif;
        counter = counter + 2;
    endwhile;

    alias diskMapEntry R8;
    diskMapEntry = DISK_MAP_TABLE + PID*10;

    // print("pro:return!");
    // Check Disk Map Table for Any Temporary Disk Block Allocations for Stack/Heap
    // 2 and 3 => Heap
    // 8 and 9 => Stack
    counter = 2;
    while(counter < 10) do
        if([diskMapEntry + counter] != -1) then
            // Call Release Block Function (FunNum = 4, Memory Manager)
            // ARGS: FunNum, Block Number, PID
            multipush(R1,R2,R3,R4,R8);
                R3 = PID;
                R2 = [diskMapEntry + counter];
                R1 = 4;
                call MOD_2;
            multipop(R1,R2,R3,R4,R8);
        endif;
        if(counter == 3) then
            counter = 8;
        else
            counter = counter + 1;
        endif;
    endwhile;

    // Invalidate the DISK MAP TABLE for this Process 
	counter = 0;
	while(counter <= 9) do
		[diskMapEntry + counter] = -1;
        counter = counter + 1;
	endwhile;
    // print("pro:return!");
    return;
endif;

// ---- KILL ALL (funNum = 5) ------------------------------------------------
// Kills all the processes except the current process, idle and init/login
// Args: 1. PID
// Called by shutdown and logout system call

if(functionNum == 5) then
    alias pid R6;
    pid = R2;
    // Lock all files to ensure that no processes are in the middle of a file operation 
    alias cnt R5;
    cnt = 0;
    while( cnt < 60 ) do
        // For each valid entry in the Inode table	
        if([INODE_TABLE + cnt*16 + 1 != -1]) then
            // lock file
            R1 = ACQUIRE_INODE;
            R2 = cnt;
            R3 = [SYSTEM_STATUS_TABLE+1];
            multipush(R6, R5);
            call RESOURCE_MANAGER;
            multipop(R6, R5);
        endif;
        cnt = cnt + 1;
    endwhile ;

    // For each pid from 2 to MAX_PROC_NUM(=16) - 1 	
    //* PID 0 is idle and 1 is init *//
    cnt = 2;
    while (cnt < MAX_PROC_NUM - 1) do
        // If pid != pid of the current process AND state of the process in the process table entry is not TERMINATED
        if( cnt != pid && [PROCESS_TABLE+cnt*16 + 4] != TERMINATED ) then
            R1 = 3;
            R2 = cnt;
            multipush(R6, R5);
            call PROCESS_MANAGER;
            multipop(R6, R5);
        endif ;
        cnt = cnt + 1;
    endwhile;

    // For each valid entry in the Inode table: 
    // Release lock on the file by calling the release_inode() function in the Resource Manager module.
    cnt = 0;
    while( cnt < 60 ) do
        // For each valid entry in the Inode table	
        if([INODE_TABLE + cnt*16 + 1 != -1]) then
            // unlock file
            R1 = RELEASE_INODE;
            R2 = cnt;
            R3 = [SYSTEM_STATUS_TABLE+1];
            multipush(R6, R5);
            call RESOURCE_MANAGER;
            multipop(R6, R5);
        endif;
        cnt = cnt + 1;
    endwhile ;

    return;
endif;
