// ------------- LOGOUT SYSCALL ------------------------------------------------------------------------------
// Arguments: 
// None
// Returns:
// -1 on error, otherwise does not return anything

//---------- Set the Mode Flag for LOGOUT = 28 ------------------------------ 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 28;

// Store UserSp in a Variable
alias userSP R2;
userSP = SP;

//------------- Switch Stacks ----------------------------------------------------
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]) * 16 + 11] * 512 -1;

alias currPID R4;
currPID = [SYSTEM_STATUS_TABLE + 1];

alias physicalAddrRetVal R3;
physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);

alias processEntry R5;
processEntry = PROCESS_TABLE + currPID * 16;

//--- If Current Process is NOT the Shell Process, return -1 ---------------------
// Logout System Call can only be executed from the shell process (PID = 2)
if(currPID != 2) then
    // return -1
    [physicalAddrRetVal] = -1;
    [processEntry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

// -- Kill all the processes except the current process(SHELL), idle and init/login. ---------
// by calling KILL_ALL() in Process Manager
multipush(R2,R3,R4,R5);
	R1 = KILL_ALL;
    R2 = currPID;	
	call MOD_1;
multipop(R2,R3,R4,R5);

// -- Current Process (i.e. Shell Process) is set to TERMINATED state -------------
[processEntry + 4] = TERMINATED;

// ----- IMPORTANT STEPS ----------------------------------------------------------
//* Shell should be set to READY ONLY when the next user logs in. *//
// Get Entry IP Value from the Header (of Code Section) of Shell Program
// Place it in the beginning (logical page 8) of the stack of the shell
// SHELL PID = 2
[[PTBR + 2*8]*512 + 0] = [[PTBR + 2*4]*512 + 1];

// Reset the USERSP of the shell to 4096.
[processEntry + 13] = 4096;


// -- Wake up the Login process, STATE changed to READY -----------------------------------
// Login Process PID = 1
[PROCESS_TABLE + 16*1 + 4] = READY;

// -- RESET the CURRENT_USER_ID field in the System Status Table to 0 (KERNEL) -----------------------
[SYSTEM_STATUS_TABLE + 0] = 0;

multipush(R2,R3,R4,R5,R6,R7,R8);
    call SCHEDULER;
multipop(R2,R3,R4,R5,R6,R7,R8);
// DONE, Will not Return Back Here, Unless Again Invoked (Now TERMINATED State)
