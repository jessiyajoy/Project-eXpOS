//  BOOT MODULE 


// module 0 
loadi(40, 53);
loadi(41, 54);

// module 1 
loadi(42,55);
loadi(43,56);

//  module 2 
loadi(44,57);
loadi(45,58);

//  module 3 
loadi(46,59);
loadi(47,60);

//  module 4 
loadi(48, 61);
loadi(49, 62);

//  module 5 
loadi(50, 63);
loadi(51, 64);

//  module 6 
loadi(52, 65);
loadi(53, 66);


// - Library 
loadi(63, 13);
loadi(64, 14);

// - Interrupts and Exeptions 


// - Exception Handler 
loadi(2, 15);
loadi(3, 16);

// - Timer Interrupt -
loadi(4, 17);
loadi(5, 18);

//  Console Interrupt 
loadi(8, 21);
loadi(9, 22);

//  Disk Interrupt 
loadi(6, 19);
loadi(7, 20);

//  INT4 -
loadi(10, 23);
loadi(11, 24);

//  INT5 -
loadi(12, 25);
loadi(13, 26);

//  INT6 -
loadi(14, 27);
loadi(15, 28);

// - INT7 -
loadi(16, 29);
loadi(17, 30);

// - INT8 
loadi(18, 31);
loadi(19, 32);

// - INT9 -
loadi(20, 33);
loadi(21, 34);

//  INT10 
loadi(22, 35);
loadi(23, 36);

//  INT11 
loadi(24, 37);
loadi(25, 38);

//  INT12 
loadi(26, 39);
loadi(27, 40);

//  INT13 
loadi(28, 41);
loadi(29, 42);

//  INT14 
loadi(30, 43);
loadi(31, 44);

//  INT15 
loadi(32, 45);
loadi(33, 46);

//  INT16 
loadi(34, 47);
loadi(35, 48);

//  INT17 
loadi(36, 49);
loadi(37, 50);


//  Disk Data Structure -
//  Inode Table ( and UserTable ) 
loadi(59, 3);
loadi(60, 4);

//  Disk Free List 
loadi(61,2);

//  Root File 
loadi(62, 5);




// - Programs -

// INIT / LOGIN PROG
loadi(65, 7);

// SHELL PROG
loadi(67, 9);
loadi(68, 10);


//  Page Tables 
PTLR = 10;

alias cnt R2;
cnt = 0;

//- initialize Init and Shell Page Tables
PTBR = PAGE_TABLE_BASE + 20;

while( cnt < 40) do
    [PTBR+cnt] = -1;
    [PTBR+cnt+1] = "0000";
    cnt = cnt + 2;
endwhile;

// - Page Table INIT / LOGIN -

// PID = 1
PTBR = PAGE_TABLE_BASE + 20;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";

// Stack
[PTBR+16] = 66;
[PTBR+17] = "0110";



// - Page Table SHELL -

PTBR = PTBR + 20;

// PID = 2

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";

// Stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

// - Entry Points -
// - ENRTY POINT INIT / LOGIN -
[66*512] = [65 * 512 + 1];
// - ENRTY POINT SHELL -
[78*512] = [67 * 512 + 1];

//  Process Tables -

alias processEntry R4;
processEntry = PROCESS_TABLE + 16;

//  Process Table INIT / LOGIN -
    // PID
    [processEntry + 1] = 1;
    // UserID
    [processEntry + 3] = 1;
    // STATE Field
    [processEntry + 4] = CREATED;
    // UArea Page
    [processEntry + 11] = 77;
    // UPTR (Logical Address for Top of User Stack)
    [processEntry + 13] = 8 * 512;
    // KPTR
    [processEntry + 12] = 0; 
    // PTBR_field
    [processEntry + 14] = PAGE_TABLE_BASE + 20;
    // PTLR_field
    [processEntry + 15] = PTLR;


processEntry = processEntry + 16;
//  Process Table SHELL -
    // PID
    [processEntry + 1] = 2;
    // PPID
    [processEntry + 2] = 1;
    // STATE Field
    [processEntry + 4] = TERMINATED;
    // UArea Page
    [processEntry + 11] = 80;
    // UPTR (Logical Address for Top of User Stack)
    [processEntry + 13] = 8 * 512;
    // KPTR
    [processEntry + 12] = 0; 
    // PTBR_field
    [processEntry + 14] = PTBR;
    // PTLR_field
    [processEntry + 15] = PTLR;


//  STATE field of Other Process table entries to TERMINATED 
alias pidPro R0;
pidPro = 2;
while( pidPro < 16 ) do
    [PROCESS_TABLE + 16*pidPro + 4] = TERMINATED;
    pidPro = pidPro + 1;

    // Initilaize TICK to 0
    [PROCESS_TABLE + 16*pidPro] = 0;

endwhile;

// - Per Process Resource Table for INIT / LOGIN -
cnt = 0;
while( cnt != 8 ) do
    [[PROCESS_TABLE + 16 + 11]*512 + 496 + cnt*2] = -1;
    cnt = cnt + 1;
endwhile;

// - Per Process DISK MAP TABLE for SHELL 
cnt= 0;
while(cnt < 10) do
    [DISK_MAP_TABLE + 20 + cnt] = -1;
    cnt = cnt + 1;
endwhile;

 [DISK_MAP_TABLE + 20 + 4] = 9;
 [DISK_MAP_TABLE + 20 + 5] = 10;



//  Initializations 

//  TERMINAL STATUS TABLE -
[TERMINAL_STATUS_TABLE] = 0;

//  DISK STATUS TABLE -
[DISK_STATUS_TABLE] = 0;

alias counter R1;

//OPEN_FILE_TABLE-
counter=0;
while(counter < 32) do
	[OPEN_FILE_TABLE + 4*counter + 0] = -1;	//inode index to -1
	[OPEN_FILE_TABLE + 4*counter + 1] = 0;	//open instance count to 0
    counter = counter + 1;
endwhile;

// - FILE STATUS TABLE -
counter = 0;
while ( counter < 60 ) do
    [FILE_STATUS_TABLE + counter*4 + 0] = -1;     // Locking Pid
    [FILE_STATUS_TABLE + counter*4 + 1] = -1;     // File Open Count
    counter = counter + 1;
endwhile;

// - BUFFER TABLE 
counter = 0;
while ( counter < 4 ) do
    [BUFFER_TABLE + counter*4 + 0] = -1;       // Block Number
    [BUFFER_TABLE + counter*4 + 1] = 0;        // Dirty Bit
    [BUFFER_TABLE + counter*4 + 2] = -1;       // Lockigng Pid
    counter = counter + 1;
endwhile;


//  SEMAPHORE TABLE (Maximum of 32 SEMAPHORES) -
counter = 0;
while( counter < 32) do
    // Locking PID and Process Count
    [SEMAPHORE_TABLE + 4*counter] = -1;
    [SEMAPHORE_TABLE + 4*counter + 1] = 0;
    counter = counter + 1;
endwhile;

//  MEMORY_FREE_LIST, initial free pool starts from 82, occupied: INIT/LOGIN, SHELL and IDLE 
// Pages 71 - 74 : used for Buffer Cache
// Page 75 : reserved
// Till 70 and from 76 - 80 Used
// 81 and 82 for Swapper Daemon
counter = 0;
while(counter <= 82) do
	[MEMORY_FREE_LIST + counter] = 1;
	counter = counter + 1;
endwhile;
while(counter < 128) do
	[MEMORY_FREE_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

//  SYSTEM_STATUS_TABLE Initialization -
// wait_mem_cnt = 0, mem_free_count = initial free pool (127-82=45)
// SWAPPED_COUNT field to 0 and PAGING_STATUS field to 0
[SYSTEM_STATUS_TABLE + 2] = 45; // mem_free_count
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 4] = 0;
[SYSTEM_STATUS_TABLE + 5] = 0;


return;
