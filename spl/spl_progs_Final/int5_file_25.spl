// ---- FILE SYSCALLS: ---------- 
// Open  = 2
// Close = 3
// Seek  = 6

//---- Extract Syscall Number from User stack (at userSP - 5)------------
alias SysCallNum R1;
alias userSP R2;
userSP = SP;
SysCallNum = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 5)/ 512] * 512 + ((userSP - 5) % 512)];

//---- Switch Stack --------------------------------------------------------------------------------------------
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13] = SP;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias physicalAddrRetVal R3;
physicalAddrRetVal = [PTBR + 2 * (userSP-1)/512] * 512 + ((userSP-1)%512);
alias processTableEntry R4;
processTableEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;
alias perProcessEntry R7;
perProcessEntry = [processTableEntry+ 11]*512 + RESOURCE_TABLE_OFFSET;

//---- Syscalls OPEN(syscallNum = 2) and CLOSE(syscallNum = 3) (FILES)-------------------------------------------------------------

//---- OPEN (Syscall Num = 2) -------------------------------------------------------------------------------------
// Args:
// 1. filename
// returns:
// fd : file descriptor (per process resource table index)
// -1 : File not found or file is not a data or root file
// -2 : System has reached its limit of open files
// -3 : Process has reached its limit of resources

if(SysCallNum == 2) then
    //---- Mode Flag -----
    [processTableEntry + 9] = 2;

    //--- Get Arg ---------
    alias fileName R5;
    fileName = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 4)/ 512] * 512 + ((userSP - 4) % 512)];

    //--- Finding Free PER PROCESS RESOURCE TABLE Entry ------------
    alias cnt R6;
    cnt = 0;
    while ( cnt < 8 ) do
        if([perProcessEntry + cnt*2] == -1) then
            break;
        endif;
        cnt = cnt + 1;
    endwhile;
    if(cnt == 8) then
        // No free Per Process Table Entry
        // return -3
        [physicalAddrRetVal] = -3;
        [processTableEntry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    //--- Call Open() from File Manager Module -----
    // args: funNum(3), fileName
    // returns: Open File Table Entry Index, -1 or -2
    multipush(R1,R2,R3,R4,R5,R6,R7);
        R1 = 3;
        R2 = fileName;
        call FILE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7);
    alias openFileTableIndex R8;
    openFileTableIndex = R0;
    if( openFileTableIndex == -1 || openFileTableIndex == -2 ) then
        // Open() Failed , return error code
        [physicalAddrRetVal] = openFileTableIndex;
        [processTableEntry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    //--- Setting Up the Per Process Resource Table Entry ----------------------------------
    [perProcessEntry + cnt*2] =  FILE;                    // RId
    [perProcessEntry + cnt*2 + 1] =  openFileTableIndex;  // Index

    //---- Return the cnt => fd : File Descriptor, Index in the Per Process Reource Table Entry 
    [physicalAddrRetVal] = cnt;
    [processTableEntry + 9] = 0;
    SP = userSP;
    ireturn;

endif;

//---- CLOSE (Syscall Num = 3) ----------------------------------------------------
// Args:
// 1. File Descriptor (fd, Index of Resorce in Per Process Resource Table, use the index to get the inodeindex for the file) 
// returns:
// -1 : fd, file descriptor is invalid
if(SysCallNum == 3) then
    //---- Mode Flag -----
    [processTableEntry + 9] = 3;

    //--- Get Arg ---------
    alias fd R5;
    fd = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 4)/ 512] * 512 + ((userSP - 4) % 512)];

    // Validity of fd : (0-7) range
    if( fd < 0 || fd > 7) then
        [physicalAddrRetVal] = -1;
        [processTableEntry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    // Validity of Per Process Reource Table Entry
    // /* No file is open with this file descriptor. */
    if([perProcessEntry + fd*2] != FILE) then
        // return -1
        [physicalAddrRetVal] = -1;
        [processTableEntry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    // ---- Get the Open File Table Index using fd from Per Process Resource Table
    alias openFileTableIndex R6;
    openFileTableIndex = [perProcessEntry + fd*2 + 1];

    //--- Call Close() from File Manager Module -----
    // args: funNum(4), Open File Table Index
    // returns: NIL
    multipush(R1,R2,R3,R4,R5,R6,R7);
        R1 = 4;
        R2 = openFileTableIndex;
        call FILE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7);

    //--- Invalidate the Per Process Resource Table Entry ---------------
    // Set Resource Identifier field to -1
    [perProcessEntry + fd*2] = -1;

    //--- Return 0, Success -----------
    [physicalAddrRetVal] = 0;
    [processTableEntry + 9] = 0;
    SP = userSP;
    ireturn;

endif;

//---- SEEK (Syscall Num = 6) ----------------------------------------------------
// Args:
// 1. File Descriptor (fd, Index of Resorce in Per Process Resource Table, use the index to get the inodeindex for the file) 
// 2. Offset
// returns:
// -1 : fd, file descriptor is invalid
if(SysCallNum == 6) then
    //---- Mode Flag -----
    [processTableEntry + 9] = 6;

    //--- Get Arg ---------
    alias fd R5;
    fd = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 4)/ 512] * 512 + ((userSP - 4) % 512)];
    alias offset R11;
    offset = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 3)/ 512] * 512 + ((userSP - 3) % 512)];

    // Validity of fd : (0-7) range
    if( fd < 0 || fd > 7) then
        [physicalAddrRetVal] = -1;
        [processTableEntry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    // Validity of Per Process Reource Table Entry
    // /* No file is open with this file descriptor. */
    if([perProcessEntry + fd*2] != FILE) then
        // return -1
        [physicalAddrRetVal] = -1;
        [processTableEntry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    // ---- Get the Open File Table Index using fd from Per Process Resource Table
    alias openFileTableIndex R6;
    openFileTableIndex = [perProcessEntry + fd*2 + 1];

    // --- Get the Inode Index 
    alias inodeindex R9;
    inodeindex = [OPEN_FILE_TABLE + openFileTableIndex*4 + 0];

    // /* Lock the inode */
    // Calling Acquire_Inode() Resource Manager
    // Args:
    // funNum = 4, inodeTableIndex, PID
    multipush(R1,R2,R3,R4,R5,R6,R7,R9,R11);
        R1 = 4;
        R2 = inodeindex;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R7,R9,R11);
    if(R0 == -1) then
        //return -1
        [physicalAddrRetVal] = -1;
        [processTableEntry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    // ---- Get Current Lseek Position ---------------------
    alias lseek_addr R10;
    lseek_addr = OPEN_FILE_TABLE + openFileTableIndex*4 + 2;

    // --- Check the validity of the given Offset  -------------
    // Get the fileSize
    alias fileSize R12;
    if(inodeindex == INODE_ROOT) then	
        // file size of ROOT is 480
		fileSize = 480;
	else
        // if file is not root
		fileSize = [INODE_TABLE + 16*inodeindex + 2];
	endif;

    // if given offset takes lseek to < 0, return -2
    if(([lseek_addr] + offset) < 0) then	
        // relese inode
		multipush(R1,R2,R3,R4,R5,R6,R7,R9,R10,R11,R12);
		R3 = [SYSTEM_STATUS_TABLE + 1];
		R1 = RELEASE_INODE;
		R2 = inodeindex;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5,R6,R7,R9,R10,R11,R12);
		[physicalAddrRetVal] = -2;
        [processTableEntry + 9] = 0;
        SP = userSP;
        ireturn;
	endif;

    //---------- LSEEK UPDATE -------------- 
    if(offset == 0) then
        // setting ZERO
		[lseek_addr] = 0;
	else
		if(([lseek_addr]+offset) > fileSize) then
            // EOF
			[lseek_addr] = fileSize;
		else
            // Update as given
			[lseek_addr] = [lseek_addr] + offset;
		endif;
	endif;

    // Calling Release_Inode() Resource Manager 
    // Args:
    // funNum = 5, inode Table Index, PID
    multipush(R1,R2,R3,R4,R5,R6,R7,R9,R10,R11,R12);
        R1 = 5;
        R2 = inodeindex;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R7,R9,R10,R11,R12);
    [physicalAddrRetVal] = 0;
    [processTableEntry + 9] = 0;
    SP = userSP;
    ireturn;

endif;

//------ Change back to userSP ---------------------------------------------------------------------------------
print("Wrong SyscallNum!");
SP = userSP;
ireturn; 
