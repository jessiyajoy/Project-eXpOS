alias functionNum R1;

//GET_FREE_PAGE = 1
if( functionNum == 1 ) then

    //Increment WAIT_MEM_COUNT in system status table
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    //While memory is full (MEM_FREE_COUNT will be 0)---- BUSY LOOP
    while( [SYSTEM_STATUS_TABLE + 2] == 0) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
        //call module 5
        multipush(R1);
        call SCHEDULER;
        multipop(R1);
    endwhile ;

    //Decrement MEM_FREE_COUNT & WAIT_MEM_COUNT in system status table
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;

    //Find a free page using memory free list
    alias pageIdx R2;
    pageIdx = 0;
    while( pageIdx < 128 ) do
        if( [MEMORY_FREE_LIST + pageIdx] == 0 ) then
            //print "MOD 2 free";
            R0 = pageIdx;
            //print R0;
            break;
        endif ;
        pageIdx = pageIdx + 1;
    endwhile ;

    [MEMORY_FREE_LIST + pageIdx] = 1;
    
    breakpoint;
    return;
endif;



//RELEASE_PAGE = 2	
if( functionNum == 2 ) then
    alias pageNum R2;
    
    //Decrement the corresponding entry in the memory free list
    [MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] - 1; 

    //If that entry in the memory free list becomes zero, then the page is free
    if( [MEMORY_FREE_LIST + pageNum] == 0 ) then
            [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif ;

    //STATE field of other process table entries with WAIT_MEM to READY
    alias var R3;
    var = 0;
    while( var < 16 ) do
        if( [PROCESS_TABLE + 16*var + 4] ==  WAIT_MEM) then
            [PROCESS_TABLE + 16*var + 4] = READY;
        endif ;
        var = var + 1;
    endwhile ;


    breakpoint;
    return;
endif;


