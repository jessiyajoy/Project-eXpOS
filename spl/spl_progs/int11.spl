//NUMBER OF SWITCHES TO KERNEL MODULE
[70*512 + 511] = [70*512 + 511]+1;


//---- SYSTEM CALLS :
//11. GET PID SYSTEM CALL
//12. GET PPID SYSTEM CALL
//13. WAIT SYSTEM CALL
//14. SIGNAL SYSTEM CALL

alias syscallNum R15;
syscallNum = [([PTBR + 2 * ((SP - 5) / 512)] * 512) + ((SP - 5) % 512)];

alias userSP R14;
userSP = SP;

//--Switch Stack
//save user SP, set SP to KPTR
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;


//---GET PID SYSTEM CALL
//Args - none
//Return : current PID
if(syscallNum == 11) then
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = [SYSTEM_STATUS_TABLE+1];
    goto end;
endif;


//---GET PPID SYSTEM CALL
//Args - none
//Return : parent PID
if(syscallNum == 12) then
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 2];
    goto end;
endif;



//---WAIT SYSTEM CALL
//Args - PID
//Return : 0 - Success , -1 - Given PID is invalid or it is PID of invoking process
if(syscallNum == 13) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 13;
    alias wPID R15;
    wPID = [([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];

    //CHECK wPID : 1.PID if of current process itself 2. valid range 3. TERMINATED process 
    if( wPID == [SYSTEM_STATUS_TABLE+1] || wPID>15 || wPID<0 || [PROCESS_TABLE + 16*wPID + 4] == TERMINATED ) then
        [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
        goto end;
    endif;

    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 4] = WAIT_PROCESS;
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 5] = wPID;
    call SCHEDULER;

    //The following step is executed only when the scheduler runs this process again
    //happens only when the state of the process becomes READY again
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = 0;
    goto end;    
endif;


//---SIGNAL SYSTEM CALL
//Args - none
//Return : 0 - Success
if(syscallNum == 14) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 14;
    alias cnt R13;
    cnt = 0;
    while( cnt < 16 ) do
        if( [PROCESS_TABLE + 16*cnt + 4] == WAIT_PROCESS &&  [PROCESS_TABLE + 16*cnt + 5] == [SYSTEM_STATUS_TABLE+1]) then
            [PROCESS_TABLE + 16*cnt + 4] = READY;
        endif ;
        cnt = cnt + 1;
    endwhile;
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = 0;
    goto end;
endif;



end :
//switch stack, mode
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]; 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;

ireturn;