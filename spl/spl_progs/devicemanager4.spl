alias functionNum R1;
alias currentPID R2;


//Disk Load (function number = 2, device manager module)
if( functionNum == 2 ) then

    alias pageNo R3;
    alias blockNo R4;


    //Calling Acquire Disk function in resource manager module (module 0)
    multipush(R1, R2, R3, R4); 
    R1 = 3;
    R2 = currentPID;
    call MOD_0; 
    multipop(R1, R2, R3, R4);

    //load(0), store(1)
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = pageNo;
    [DISK_STATUS_TABLE + 3] = blockNo;


    //DISK ACCESS COUNT
    [70*512 + 508] = [70*512 + 508] + 1;

    load(pageNo, blockNo);

    [PROCESS_TABLE + ( currentPID * 16) + 4] = WAIT_DISK;
    //call module 5 SCHEDULER
    multipush(R0, R1, R2, R3, R4);
    call SCHEDULER;
    multipop(R0, R1, R2, R3, R4);
    
    return;
endif ;




//terminal write function
if( functionNum == 3 ) then

    //Calling Acquire Terminal in resource manager module
    multipush(R1, R2, R3); 
    R1 = 8;
    R2 = currentPID;
    call MOD_0; 
    multipop(R1, R2, R3);

    print R3;

    //Calling Release Terminal in resource manager module
    multipush(R1, R2, R3);
    R1 = 9;
    R2 = currentPID;
    call MOD_0; 
    multipop(R1, R2, R3); 
    return;
endif ;



////terminal read function
if( functionNum == 4 ) then

    //Calling Acquire Terminal in resource manager module
    multipush(R1, R2, R3);
    R1 = 8;
    R2 = currentPID;
    call MOD_0; 
    multipop(R1, R2, R3);
    read;

    //Change state of process to WAIT_TERMINAL
    [PROCESS_TABLE + ( currentPID * 16) + 4] = WAIT_TERMINAL;
    //call module 5 SCHEDULER
    multipush(R0, R1, R2, R3);
    call SCHEDULER;
    multipop(R0, R1, R2, R3);

    //find physical address where input word to be stored
    //Store value in input buffer field of process table to this address
    alias physicalAddrInput R4;
	physicalAddrInput = ([PTBR + 2 * (R3 / 512)] * 512) + (R3 % 512);
	[physicalAddrInput] = [PROCESS_TABLE + ( currentPID * 16) + 8];

    //NOte : Release Terminal for terminal read is in Console Interrupt Handler
    return;
endif ;
