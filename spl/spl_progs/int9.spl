
// //EXEC SYSTEM CALL

// //system mode
// [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

// //save user SP for further use
// alias userSP R5;
// userSP = SP;

// //save user stack ptr in prcoess table UPTR
// [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// //set SP to KPTR
// SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

// //manually calculate file Name(argument 1) physical address and get its value from userSP - 4
// alias fileName R6;
// fileName = [[PTBR + 2*(userSP-4)/512]*512 + ((userSP-4)%512)];

// alias file R7;
// file = 0;
// alias inodetable R8;
// while( file < 60 ) do
//     inodetable = INODE_TABLE + file*16;
//     if( [inodetable + 1 ] == fileName && [inodetable] == EXEC ) then
//         goto fileFound;
//     endif ;
//     file = file + 1;
// endwhile ;

// //control reached here implies EXEC file with name fileName not found
// //store -1 return value at userSP - 1
// alias physicalAddrRetVal R9;
// physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
// [physicalAddrRetVal] = -1;
// //switch stack
// SP = userSP;
// //mode 
// [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

// ireturn;


// //file found and is an EXEC file
// fileFound :

// //invoke Exit function of Process Manager mod 1
// multipush(R5, R6, R7, R8, R9);
// R1 = EXIT_PROCESS;
// R2 = [SYSTEM_STATUS_TABLE + 1];
// call PROCESS_MANAGER;
// multipop(R5, R6, R7, R8, R9);

// //Reclaim same userAreaPage

// //get userAreaPage number
// alias userAreaPage R10;
// userAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];

// //increment MEMORY_FREE_LIST entry of user area page
// [MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1;

// //decrement MEM_FREE_COUNT field in SYSTEM_STATUS_TABLE
// [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

// //per-process resource table.
// alias cnt R11;
// cnt = 0;

// while( cnt < 8 ) do
//     [userAreaPage*512 + 496 + cnt*2] = -1;
//     cnt = cnt + 1;
// endwhile ;



// SP = userAreaPage*512 - 1;
// [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
// [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = file;

// alias pageTableEntry R13;
// pageTableEntry = PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE+1];
// //print "a1";

// //Library
// [pageTableEntry+0] = 63;
// [pageTableEntry+1] = "0100";
// [pageTableEntry+2] = 64;
// [pageTableEntry+3] = "0100";

// //Heap

// [pageTableEntry+4] = -1;
// [pageTableEntry+5] = "0000";

// [pageTableEntry+6] = -1;
// [pageTableEntry+7] = "0000";

// //Stack

// multipush(R5, R6, R7, R8, R9, R10, R13);
// R1 = GET_FREE_PAGE;
// call MEMORY_MANAGER;
// multipop(R5, R6, R7, R8, R9, R10, R13);
// [pageTableEntry+16] = R0;
// [pageTableEntry+17] = "0110";

// multipush(R5, R6, R7, R8, R9, R10, R13);
// R1 = GET_FREE_PAGE;
// call MEMORY_MANAGER;
// multipop(R5, R6, R7, R8, R9, R10, R13);
// [pageTableEntry+18] = R0;
// [pageTableEntry+19] = "0110";
// //print "a2";

// //Code

// //first page alone
// multipush(R5, R6, R7, R8, R9, R10, R13);
// R1 = GET_CODE_PAGE;
// R2 = [INODE_TABLE + file*16 + 8 ];
// //print "blockee";
// //print R2;
// call MEMORY_MANAGER;
// multipop(R5, R6, R7, R8, R9, R10, R13);
// [pageTableEntry + 8] = R0;
// [pageTableEntry + 9] = "0100";
// //print "a3";


// //invalidate remaining pages
// [pageTableEntry + 10] = -1;
// [pageTableEntry + 11] = "0000";
// [pageTableEntry + 12] = -1;
// [pageTableEntry + 13] = "0000";
// [pageTableEntry + 14] = -1;
// [pageTableEntry + 15] = "0000";
// //print "a4";

// //DISK MAP TABLE Initialization

// //DISK_MAP_TABLE + PID*10
// alias diskMapTable R12;
// diskMapTable = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10;

// //unused, heap, code, stack
// [ diskMapTable + 0 ] = -1;
// [ diskMapTable + 1 ] = -1;
// [ diskMapTable + 2 ] = -1;
// [ diskMapTable + 3 ] = -1;
// [ diskMapTable + 4 ] = [INODE_TABLE + file*16 + 8 ];
// [ diskMapTable + 5 ] = [INODE_TABLE + file*16 + 9 ];
// [ diskMapTable + 6 ] = [INODE_TABLE + file*16 + 10 ];
// [ diskMapTable + 7 ] = [INODE_TABLE + file*16 + 11 ];
// [ diskMapTable + 8 ] = -1;
// [ diskMapTable + 9 ] = -1;

// //if([SYSTEM_STATUS_TABLE+1] == 3)then
// //print "disk";
// // print [ diskMapTable + 4 ];
// // print [ diskMapTable + 5 ];
// // print [ diskMapTable + 6 ];
// // print [ diskMapTable + 7 ];

// //endif;

// //set entry point in user stack
// [[pageTableEntry+16] *512] = [[pageTableEntry+8]*512 + 1];

// SP = 8*512;
// //Mode Flag
// [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
// //print "yes";
// ireturn;




// ------ EXEC SYSCALL -------------------------------------------------------- //

//-------- Switch Stacks --------
alias userSP R10;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 -1;

// -------- Set ModeFlag -------- 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

// -------- Get Filename -------- 
alias fileName R1;
fileName = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 4)/ 512] * 512 + ((userSP - 4) % 512)];

// inode search for file
alias i R2;
i = 0;
while(i <= 59) do
	if(([INODE_TABLE + i*16 + 1] == fileName) && ([INODE_TABLE + i*16] == EXEC)) then
		break;
	else
		i = i + 1;
	endif;
endwhile;
// ------- file not found -----------
if(i == 60) then
	[[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 1)/ 512] * 512 + ((userSP - 1) % 512)] = -1;
	SP = userSP;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
	ireturn;
endif;

// -------- file found, Call Exit process -------- 
multipush(R0,R1,R2);
// ARGS: funNum and PID
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0,R1,R2);
// ----- Re-Aquire UArea Page ------------------------------------
alias UAreaPage R3;
UAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];

// Incr mem free list entry, decrement mem_free_cnt in sys status  
[MEMORY_FREE_LIST + UAreaPage] = [MEMORY_FREE_LIST + UAreaPage] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

// ----- Kernal Stack for New Process ----------------------------
SP = UAreaPage * 512 - 1;

// ---- Per Process Resource Table for New Process ------------------------
alias cnt R8;
cnt = 0;
while( cnt < 8 ) do
    [UAreaPage*512 + 496 + cnt*2] = -1;
    cnt = cnt + 1;
endwhile;
// ------ Process table for New Process -----------------------------------
// STATE(4) and Inode_index Field (7)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = i;

// ----- Page Table Set Up for New Process -----------------------------------
PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20;

// ------ library -----------
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// ------- Stack, calling Get Free Page function (funNum = 1) ----------
multipush(R0,R1,R2,R3);
R1 = 1;
call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";
multipop(R0,R1,R2,R3);
multipush(R0,R1,R2,R3);
R1 = 1;
call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";
multipop(R0,R1,R2,R3);

// -------- Invalidated Heap Allocation ---------------------------------
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// -------- Code Pages ---------------------------------------------------

[PTBR+8] = -1;
[PTBR+9] = "0000";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// ---- Page 1 Allocation ----------------

// Calling Get Code Page (funNum = 5, Mem Manager Module)
// Args: FunNum, Block Num (Get from the Inode Table Entry for the File)

multipush(R0,R1,R2,R3);
R1 = 5;
R2 = [INODE_TABLE + i*16 + 8];
call MOD_2;
// Assign the New Page Number in Page Table
[PTBR+8] = R0;
[PTBR+9] = "0100";
multipop(R0,R1,R2,R3);


// ---- Disk Map Table Set Up -----------------------------------------
// Only the Code Blocks

[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 0] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 1] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = [INODE_TABLE + i*16 + 8];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = [INODE_TABLE + i*16 + 9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = [INODE_TABLE + i*16 + 10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = [INODE_TABLE + i*16 + 11];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;

// breakpoint;
// ----- Entry Point for the New Process -----------------------------
[[PTBR + 16] * 512] = [[PTBR + 8] * 512 + 1];

// Mode Flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
SP = 8*512;
PTLR = 10;
PTBR = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 14];
// breakpoint;
ireturn;
