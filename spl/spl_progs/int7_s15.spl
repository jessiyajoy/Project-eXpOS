// Set the Mode Flag for WRITE = 5
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

// Store UserSp in a Variable
alias userSP R0;
userSP = SP;

// Switch Stacks
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
//Set SP to KTPR
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]) * 16 + 11] * 512 -1;

// Get Arg1 == File Descriptor

alias physicalPageNumber R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
alias fileDescriptor R4;

physicalPageNumber = [PTBR + 2 * ((userSP-4)/512)];
offset = (userSP-4)%512;
fileDescPhysicalAddr = physicalPageNumber * 512 + offset;
fileDescriptor = [fileDescPhysicalAddr];


// if-else on filedecscriptor

if (fileDescriptor != -2)
then
	// store return val = -1
    alias physicalAddrRetVal R5;
    physicalAddrRetVal = [PTBR + 2 * (userSP-1)/512] * 512 + ((userSP-1)%512);
    [physicalAddrRetVal] = -1;
else
	alias word R5;
    word = [[PTBR + 2 * ((userSP-3)/512)]*512 + ((userSP-3)%512)];
    
    // Save Context of this Handler
    multipush(R0, R1, R2, R3, R4, R5);

    // Args for Module 4 calling
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1]; // PID
    R3 = word; 

    // Call Device Manager Module, to invoke Terminal Write Function
    call MOD_4;

    // Pop back the Context of this Module, ignore R0 Return value
    multipop(R0, R1, R2, R3, R4, R5);


    // store 0 for ret value
    alias physicalAddrRetVal R6;
    physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = 0;

endif;

SP = userSP;
[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
