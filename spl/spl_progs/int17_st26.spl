// // LOGIN SYSTEM CALL (SYS CALL NO = 27)

// // Arguments: User name, Password
// // Return Value:
// //  0	Success
// // -1	Invalid username or password
// // -2	Permission denied

// // can be executed only from the login process
// // It verifies the user
// // Upon successful login, a new user process (shell) with the userid of the user specified is created
// // Calling process goes to sleep till the exit of the newly created shell process



// alias processEntry R5;
// processEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;

// //system mode
// [processEntry + 9] = 27;

// //save user SP for further use
// alias userSP R6;
// userSP = SP;

// //save user stack ptr in prcoess table UPTR
// [processEntry + 13] = SP;

// //set SP to KPTR
// SP = [processEntry + 11]*512 - 1;

// // check if pid = 1 (Login process has PID = 1), else return -2
// if ([SYSTEM_STATUS_TABLE+1] != 1) then
//     [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -2;
//     goto end;
// endif;

// alias username R7;
// username = [([PTBR + 2*((userSP-4)/512)]*512) + ((userSP-4)%512)];

// alias password R8;
// password = [([PTBR + 2*((userSP-3)/512)]*512) + ((userSP-3)%512)];

// // Get the User Table entry curresponding to the username
// alias userID R9;
// userID = 0;
// while( userID < MAX_USER_NUM ) do
//     if( [USER_TABLE + 2*userID ] == username ) then
//         break;
//     endif ;
//     userID = userID +1;
// endwhile ;

// // 	If an entry does not exist, return -1
// if (userID == 16) then
//     [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
//     goto end;
// endif;

// alias userTableEntry R10;
// userTableEntry = USER_TABLE + 2*userID;

// //encrypt password
// encrypt password;

// // If the encrypted input password does not match the ENCRYPTED PASSWORD field in the user table entry, return -1
// if(password != [userTableEntry+1]) then
//     [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
//     goto end;
// endif;

// // In the process table entry for the shell process, set STATE as CREATED and USERID as that of the user who is logging in
// [PROCESS_TABLE + SHELL_PROCESS*16 + 4] = CREATED;
// [PROCESS_TABLE + SHELL_PROCESS*16 + 3] = userID;

// // 	Set the state of the current process in it's process table entry as (WAIT_PROCESS, 2)
// // Login waits for shell to exit 
// [processEntry + 4] = WAIT_PROCESS;
// [processEntry + 5] = SHELL_PROCESS;

// // In system status table, set the CURRENT_USER_ID as that of the user who is logging in.
// [SYSTEM_STATUS_TABLE] = userID;

// multipush(R5, R6);
// call SCHEDULER;
// multipop(R5, R6);

// [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = 0;
// end : 
// SP = userSP;
// [processEntry + 9] = 0;
// ireturn;




// ------------- LOGIN SYSCALL ------------------------------------------------------------------------------
// Arguments: 
// 1.User name
// 2.Password
// Returns:
// 0	:Success
// -1	:Invalid username or password
// -2	:Permission denied

//---------- Set the Mode Flag for LOGIN = 27 ------------------------------ 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 27;

// Store UserSp in a Variable
alias userSP R2;
userSP = SP;

//------------- Switch Stacks ----------------------------------------------------
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]) * 16 + 11] * 512 -1;

alias currPID R4;
currPID = [SYSTEM_STATUS_TABLE + 1];

alias physicalAddrRetVal R3;
physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);

alias processEntry R5;
processEntry = PROCESS_TABLE + currPID * 16;

alias username R7;
alias password R8;

// Get Args
username = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 4)/ 512] * 512 + ((userSP - 4) % 512)];
password = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 3)/ 512] * 512 + ((userSP - 3) % 512)];

// -- If Current Process PID != 1  ----------------------
// Log Syscall Only From Login Process
// * Login Process has PID = 1 * //
if(currPID != 1) then
    // return -2
    [physicalAddrRetVal] = -2;
    [processEntry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

// -- Get User Table Entry for the USERNAME -----------------
alias userid R6;
userid = 0;
while(userid < MAX_USER_NUM) do
    if([USER_TABLE + userid*2] == username) then
        break;
    endif;
    userid = userid + 1;
endwhile;
// If No User Found, return -1
if(userid == MAX_USER_NUM) then
    [physicalAddrRetVal] = -1;
    [processEntry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

// -- Encrypt the Given Password ------------------------------
encrypt password;

// -- If Encrypted Password Mismatch ------------------------
// encypted input password does not match the ENCRYPTED PASSWORD field in the user table entry

if( [USER_TABLE + userid*2 + 1] != password ) then
    // return -1
    [physicalAddrRetVal] = -1;
    [processEntry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

// -- SETTING UP OF SHELL PROCESS --------------------------------------------
// State of SHELL to CREATED
[PROCESS_TABLE + 16*2 + 4] = CREATED;

// USERID in shell to currently loggedin user
[PROCESS_TABLE + 16*2 + 3] = userid;

// -- Setting STATE of LOGIN to WAIT_PROCESS ---------------------------------------------------------
// State to (WAIT_PROCESS, 2)
//* Login waits for shell to exit *//
[processEntry + 4] = WAIT_PROCESS;
[processEntry + 5] = 2;

// -- Set CURRENT_USER_ID field in System Status Table to Userid-------------------------------------------------
[SYSTEM_STATUS_TABLE] = userid;

multipush(R2,R3,R4,R5,R6,R7,R8);
    call SCHEDULER;
multipop(R2,R3,R4,R5,R6,R7,R8);

// -- Return 0, Success --------------------------------------------------------------------------------------------------
[physicalAddrRetVal] = 0;
[processEntry + 9] = 0;
SP = userSP;
ireturn;