//int 7
loadi(16,29);
loadi(17,30);

//library code
loadi(63,13);
loadi(64,14);

//init code
loadi(65,7);
loadi(66,8);

//int 10
loadi(22,35);
loadi(23,36);

//exception handler
loadi(2, 15);
loadi(3, 16);

//timer interrupt
loadi(4, 17);
loadi(5, 18);

//even.xsm exec file
loadi(83, 70);

//module_5 scheduler
loadi(50,63);
loadi(51,64);

////module_0 Resource Manager
loadi(40,53);
loadi(41,54);

//module_4 Device Manager
loadi(48,61);
loadi(49,62);

//console interrupt handler
loadi(8,21);
loadi(9,22);

//interrupt 6
loadi(14,27);
loadi(15,28);

//init process

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//process id
[PROCESS_TABLE + 16 + 1] = 1;

//status
[PROCESS_TABLE + 16 + 4] = CREATED;

//user area page
[PROCESS_TABLE + 16 + 11] = 80;

//UPTR
[PROCESS_TABLE + 16 + 13] = 8*512;

//KPTR
[PROCESS_TABLE + 16 + 12] = 0;

//PTBR, PTLR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

//set entry point in user stack
[76*512] = [65 * 512 + 1];

//STATE field of other process table entries to TERMINATED
alias var R0;
var = 2;
while( var < 16 ) do
    [PROCESS_TABLE + 16*var + 4] = TERMINATED;
    var = var + 1;
endwhile ;

//indicates terminal is free before scheduling first proces
[TERMINAL_STATUS_TABLE] = 0;

return;