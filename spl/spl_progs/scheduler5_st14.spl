//PID of currently process from System Status Table
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

multipush(BP);

//find process Table entry of current process
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

//Save KPTR, PTBR, PTLR to the Process Table entry of current process
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPID R2;
newPID = currentPID+1;
if( newPID == 16 ) then
        newPID = 1;
endif;

while( 1==1 ) do
    process_table_entry = PROCESS_TABLE + newPID * 16;
    if( [process_table_entry + 4] == READY || [process_table_entry + 4] == CREATED ) then
        break;
    endif ;
    if( newPID == currentPID ) then
        newPID = 0;
        break;
    endif ;
    if( newPID == 15 && currentPID == 0 ) then
        newPID = 0;
        break;
    endif ;
    if( newPID == 15 ) then
        newPID = 1;
    else
        newPID = newPID + 1;
    endif ;
endwhile ;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
    SP = [new_process_table + 13];
	[new_process_table + 4] = RUNNING;
    [new_process_table + 9] = 0;
	ireturn;
endif;

[new_process_table + 4] = RUNNING;
multipop(BP);
return;