breakpoint;
//print "exception handler";
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=-1; //EXCEPTION HANDLER
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
backup;
multipush (EIP);


if(EC!=0 || [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13] >= ( [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+15]*512-1 ) ) then
	print "exception occured";
	print EC;
	R1=3; //exit process fn
	R2=[SYSTEM_STATUS_TABLE+1];
	print R2; 
	call MOD_1;
	call SCHEDULER;
else	
	//print "page fault";
	//print "EC value";
	//print EC;
	//print EPN;
	//print "conf";
	if(EPN==4 || EPN==5 || EPN==6 || EPN==7 ) then
		R1=5;
		R2=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+EPN];
		//print R2;
		call MOD_2;
		[ PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + EPN*2 ]=R0;
		[ PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + EPN*2 +1]="1100";
	else 
		if(EPN==2 || EPN==3) then
			R1=1;
			call MOD_2;
			[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + EPN*2]=R0;
			[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + EPN*2 +1]="1110";
			R1=1;
			call MOD_2;
			[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + EPN*2 + 2]=R0;
			[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + EPN*2 + 3]="1110";
		endif;
	endif;
endif;
//print "back to exception";

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0; 
multipop (EIP);
restore;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
SP=SP+1;
[ [ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] +2*(SP/512) ]*512 + (SP%512)]=EIP;
ireturn;

