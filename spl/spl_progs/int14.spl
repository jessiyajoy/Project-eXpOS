//NUMBER OF SWITCHES TO KERNEL MODULE
[70*512 + 511] = [70*512 + 511]+1;



//---- SYSTEM CALLS :

//19. SEMLOCK SYSTEM CALL
//20. SEMUNLOCK SYSTEM CALL

alias syscallNum R15;
syscallNum = [([PTBR + 2 * ((SP - 5) / 512)] * 512) + ((SP - 5) % 512)];

alias userSP R5;
userSP = SP;

//--Switch Stack
//save user SP, set SP to KPTR
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;


//---SEMLOCK SYSTEM CALL
//Args - Semaphore Descriptor (Integer)
//Return : 
//  0	Success or the semaphore is already locked by the current process
// -1	Semaphore Descriptor is invalid

if(syscallNum == 19) then

    // MODE
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 19;

    alias semDesc R8;
    semDesc = [([PTBR + 2*((userSP-4)/512)]*512) + (userSP-4)%512];

    alias resourceTable R7;
    resourceTable = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512 + 496;


    //  invalid if not in the range 0 - 7, or if the resource identifier field of the table entry is not 1
    if([resourceTable + 2*semDesc] != 1 || semDesc > 7 || semDesc<0) then
        [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
        goto end;
    endif;

    //while semaphore is locked by another process
    while( [SEMAPHORE_TABLE + 4*[resourceTable + 2*semDesc + 1] ] !=  -1) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_SEMAPHORE;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 5] = [resourceTable + 2*semDesc + 1];

        multipush(R5, R7, R8);
        call MOD_5;
        multipop(R5, R7, R8);
    endwhile;

    // when semaphore becomes free for locking
    [SEMAPHORE_TABLE + 4*[resourceTable + 2*semDesc + 1] ] =  [SYSTEM_STATUS_TABLE+1];

    [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = 0;
    goto end;
endif;



//---SEMUNLOCK SYSTEM CALL
//Args - Semaphore Descriptor (Integer)
//Return : 
//  0	Success
// -1	Semaphore Descriptor is invalid
// -2	Semaphore was not locked by the calling process

if(syscallNum == 20) then

    // MODE
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 20;

    alias semDesc R8;
    semDesc = [([PTBR + 2*((userSP-4)/512)]*512) + (userSP-4)%512];

    alias resourceTable R6;
    resourceTable = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512 + 496;

    //  invalid if not in the range 0 - 7, or if the resource identifier field of the table entry is not 1
    if([resourceTable + 2*semDesc] != 1 || semDesc > 7 || semDesc<0) then
        [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
        goto end;
    endif;

    //If semaphore is locked
    if( [SEMAPHORE_TABLE + 4*[resourceTable + 2*semDesc + 1] ] !=  -1 ) then
        // semaphore is locked by some other process
        if( [SEMAPHORE_TABLE + 4*[resourceTable + 2*semDesc + 1]] != [SYSTEM_STATUS_TABLE+1]) then
            [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -2;
            goto end;
        endif;

        // unlock semaphore
        [SEMAPHORE_TABLE + 4*[resourceTable + 2*semDesc + 1] ] = -1;

        //wake up processes blocked by the semaphore
        //(WAIT_SEMAPHORE, Semaphore table index of the locked semaphore) -> (READY, _ )
        alias cnt R7;
        cnt = 0;
        while ( cnt < 16) do
            if ([PROCESS_TABLE + cnt*16 + 4]==WAIT_SEMAPHORE && [PROCESS_TABLE + cnt*16 + 5]==[resourceTable + 2*semDesc + 1]) then
                [PROCESS_TABLE + cnt*16 + 4]= READY;
            endif;
            cnt = cnt + 1;
        endwhile;
    endif ;


    [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = 0;    
    goto end;
endif;


end :
//switch stack, mode
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]; 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;

ireturn;