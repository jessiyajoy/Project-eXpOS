//DISK INTERRUPT

// entered while some other process is executing in user mode
//switch to kernel stack of that process 
//do the interrupt handling
//restore user stack of process 
//return control back to process

//store user SP
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

//Change STATE field in Disk Status table (terminal released)
[DISK_STATUS_TABLE] = 0;


//Update STATUS to READY for all processes (valid PID) with WAIT_DISK status
alias var R0;
var = 0;
while( var < 16 ) do
    alias processTable R2;
    processTable = PROCESS_TABLE + 16*var;
    if( [processTable + 1] != -1 && [processTable + 4] == WAIT_DISK) then
        [processTable + 4] = READY;
    endif ;
    var = var + 1;
endwhile ;


restore;

//Switch back to user stack
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];


ireturn;

