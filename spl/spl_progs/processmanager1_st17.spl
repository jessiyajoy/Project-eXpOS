alias functionNum R1;
alias currentPID R2;


//FREE_USER_AREA_PAGE = 2
if( functionNum == 2 ) then

    //invoke Release Page function of Memory Manager Mod 2 
    multipush(R1, R2);
    R1 = 2;
    R2 = [PROCESS_TABLE + currentPID* 16 + 11];
    call MOD_2;
    multipop(R1, R2);

    return;
endif;


//EXIT_PROCESS = 3
if( functionNum == 3 ) then

    //invoke FREE_USER_AREA_PAGE function of Process Manager mod 1    
    multipush(R1, R2);
    R1 = 2;
    R2 = currentPID;
    call MOD_1;
    multipop(R1, R2);

    //invoke FREE_PAGE_TABLE function of Process Manager mod 1    
    multipush(R1, R2);
    R1 = 4;
    R2 = currentPID;
    call MOD_1;
    multipop(R1, R2);

    //Set state as TERMINATED
    [PROCESS_TABLE + currentPID* 16 + 4] = TERMINATED;

    return;
endif;



//FREE_PAGE_TABLE = 4
if( functionNum == 4 ) then
    
    PTBR = PAGE_TABLE_BASE + 20*currentPID;
    PTLR = 10;

    // Library
    [PTBR + 0] = -1;
	[PTBR + 1] = "0000";
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";
    alias cnt R3;
    cnt = 2;
    while( cnt < 10 ) do
        if([PTBR + cnt*2] != -1) then

            //invoke Release Page function of Memory Manager Mod 2 
            multipush(R1, R2, R3);
            R1 = 2;
            R2 = [PTBR + cnt*2];
            call MOD_2;
            multipop(R1, R2, R3);

            [PTBR + cnt*2] = -1;        
            [PTBR + cnt*2 + 1] = "0000";
        endif ;
        cnt = cnt + 1;
    endwhile ;

    return;
endif;

