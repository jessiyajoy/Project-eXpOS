//---- SYSTEM CALLS :

//2. OPEN SYSTEM CALL
//3. CLOSE SYSTEM CALL
//6. SEEK SYSTEM CALL

alias syscallNum R15;
syscallNum = [([PTBR + 2 * ((SP - 5) / 512)] * 512) + ((SP - 5) % 512)];
alias userSP R5;
userSP = SP;

alias processEntry R6;
processEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;

//--Switch Stack
//save user SP, set SP to KPTR
[processEntry + 13] = SP;
SP = [processEntry + 11] * 512 - 1;




//---OPEN SYSTEM CALL
//Args - Filename (String)
//Return : 
//  File Descriptor (Integer)	Success, the return value is the file descriptor for the opened file.
// -1	File not found or file is not a data or root file
// -2	System has reached its limit of open files
// -3	Process has reached its limit of resources

if(syscallNum == 2) then

    // MODE
    [processEntry + 9] = 2;

    alias filename R7;
    filename = [([PTBR + 2*((userSP-4)/512)]*512) + ((userSP-4)%512)];
    alias resourceTable R8;
    resourceTable = [processEntry + 11]*512 + RESOURCE_TABLE_OFFSET;

    //FREE ENTRY in PER PROCESS RESOURCE TABLE
    alias cnt R9;
    cnt = 0;
    while(cnt < 8) do
        if( [resourceTable + cnt*2] == -1 ) then
            break;
        endif;
        cnt = cnt + 1;
    endwhile;
    //print "restable";
    //print cnt;
    //no free entry in PER PROCESS RESOURCE TABLE
    if(cnt == 8) then
        [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -3;
        goto end;
    endif;

    alias fileDesc R10;
    fileDesc = cnt;

    //open() function in the File Manager module, returns free open file table index
    R1 = 3;
    R2 = filename;
    multipush(R5, R6, R7, R8, R9, R10);
    call FILE_MANAGER;
    multipop(R5, R6, R7, R8, R9, R10);

    //print "open";
    //print R0;

    // if Open fails, return the error code
    // open returns : -1 - file not found, locking fails(ACQUIRE_INODE), not data file
    // -2 - reached maximum number of open files in the system
    if(R0 == -1 || R0 == -2) then
        [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = R0;
        goto end;
    endif;

    alias openFileIndex R11;
    openFileIndex = R0;

    [resourceTable + fileDesc*2] = FILE;
    [resourceTable + fileDesc*2 + 1] = openFileIndex;

    [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = fileDesc;
    goto end;
endif;



//---CLOSE SYSTEM CALL
//Args - File Descriptor (Integer)
//Return : 
//  0	Success
// -1	File Descriptor given is invalid
if(syscallNum == 3) then

    // MODE
    [processEntry + 9] = 3;

    alias fileDesc R7;
    fileDesc = [([PTBR + 2*((userSP-4)/512)]*512) + ((userSP-4)%512)];

    alias resourceTable R8;
    resourceTable = [processEntry + 11]*512 + RESOURCE_TABLE_OFFSET;

    // fileDesc invalid if not in range 0 - 7
    if(fileDesc > 7 || fileDesc<0) then
        [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
        goto end;
    endif;  

    //if resource identifier field of table entry is not 0
    if([resourceTable + 2*fileDesc] != FILE) then
        [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
        goto end;
    endif;  

    alias openFileIndex R9;
    openFileIndex = [resourceTable + 2*fileDesc +1];

    //close() function in File Manager module
    R1 = 4;
    R2 = openFileIndex;
    multipush(R5, R6, R7, R8, R9);
    call FILE_MANAGER;
    multipop(R5, R6, R7, R8, R9);

    [resourceTable + fileDesc*2] = -1;

    [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = 0;    
    goto end;
endif;



//---SEEK SYSTEM CALL
//Args - File Descriptor(Integer) , Offset (Integer)
//Return : 
//  0	Success
// -1	File Descriptor given is invalid
// -2	Offset value moves the file pointer to a position outside the file
if(syscallNum == 6) then

    // MODE
    [processEntry + 9] = 6;

    alias fileDesc R7;
    fileDesc = [([PTBR + 2*((userSP-4)/512)]*512) + ((userSP-4)%512)];

    // fileDesc invalid if not in range 0 - 7
    if(fileDesc > 7 || fileDesc<0) then
        [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
        goto end;
    endif;  

    alias resourceTable R8;
    resourceTable = [processEntry + 11]*512 + RESOURCE_TABLE_OFFSET;

    //if resource identifier field of table entry is not 0
    if([resourceTable + 2*fileDesc] != FILE) then
        [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
        goto end;
    endif;  

    // Get the index of the Open File Table entry from the Per Process Resource Table entry.
    alias openFileTableEntry R9;
    openFileTableEntry = OPEN_FILE_TABLE + 4*[resourceTable + 2*fileDesc +1];

    // Get the index of the Inode Table entry from the Open File Table entry. 
    alias inodeIndex R10;
    inodeIndex = [openFileTableEntry];

    // lock file
    // CALL ACQUIRE_INODE, RESOURCE MANAGER 0
    R1 = ACQUIRE_INODE;
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE+1];
    multipush(R5, R6, R7, R8, R9, R10);
    call RESOURCE_MANAGER;
    multipop(R5, R6, R7, R8, R9, R10);

    //locking fails
    if(R0 == -1) then
        [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -1;
        goto end;
    endif;

    // Get the Lseek position from the Open File Table entry
    alias lseek R11;
    lseek = [openFileTableEntry + 2];

    alias inodeEntry R12;
    inodeEntry = INODE_TABLE + inodeIndex*16;

    alias offset R13;
    offset = [([PTBR + 2*((userSP-3)/512)]*512) + ((userSP-3)%512)];

    alias fileSize R14;

    // Check the validity of the given offset

    // 1. Get the file size of the file from the Inode Table (Use 480 if inode index is "INODE_ROOT")
    if( inodeIndex == INODE_ROOT ) then
        fileSize = 480;
    else
        fileSize = [inodeEntry + 2];
    endif ;

    // 2. If (lseek + the given offset) is less than 0, release_inode() and return -2.  
    if( lseek + offset < 0 ) then

        // release lock on file
        // CALL RELEASE_INODE, RESOURCE MANAGER 0
        R1 = RELEASE_INODE;
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE+1];
        multipush(R5, R6);
        call RESOURCE_MANAGER;
        multipop(R5, R6);
        print "offset -2";
        print lseek;
        print offset;
        [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = -2;    
        goto end;        
    endif ;

    // If the given offset is 0,
	//      Set lseek value in the Open File Table entry to 0.
    // else if lseek+offset is greater than the file size,
	//      Set the lseek value to file size. /* Check inode table for file size */
    // else
	//      Change the lseek value in the Per-Process Resource Table entry to lseek+offset.

    if( offset == 0 ) then
        [openFileTableEntry + 2] = 0;
    else
        if( lseek + offset > fileSize ) then
            [openFileTableEntry + 2] = fileSize;
        else
            [openFileTableEntry + 2] = lseek + offset;
        endif ;
    endif ;

    // release lock on file
    // CALL RELEASE_INODE, RESOURCE MANAGER 0
    R1 = RELEASE_INODE;
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE+1];
    multipush(R5, R6);
    call RESOURCE_MANAGER;
    multipop(R5, R6);

    [([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512)] = 0;    
    goto end;  
endif;




end :
//switch stack, mode
SP = [processEntry + 13]; 
[processEntry + 9] = 0;

ireturn;