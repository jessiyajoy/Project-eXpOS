breakpoint;
// ------ Switch Stack and Mode (EXCEPTION HANDLER) -------------------
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=-1; 
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
backup;
multipush (EIP);

// ----- EXCEPTION Other Than Page Fault (or User Stack is full(Return adrress cannot be pushed))------------------------------
if(EC!=0 || [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13] >= ( [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+15]*512-1 )) then
	print "----------";
	print("EC:");
	print(EC);
	print("EIP:");
	print(EIP);
	print("EPN:");
	print(EPN);
	print("EMA:");
	print(EMA);	
	print "----------";
	// -------- Exit Process Called ----------
	R1=3; 
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_1;
	call SCHEDULER;
else	
// ----- EXCEPTION : Page Fault ------------------------------
	if(EPN==4 || EPN==5 || EPN==6 || EPN==7 ) then
		// ----- Code Page (Calling Get Code Page) -------
		R1=5;
		R2=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+EPN];
		call MOD_2;
		[ PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + EPN*2 ]=R0;
		[ PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + EPN*2 +1]="1100";
	else 
		if(EPN==2 || EPN==3) then
		// ----- Heap Page (Calling Get Free Page) --------
			R1=1;
			call MOD_2;
			[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + EPN*2]=R0;
			[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + EPN*2 +1]="1110";
			R1=1;
			call MOD_2;
			[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + EPN*2 + 2]=R0;
			[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + EPN*2 + 3]="1110";
		endif;
	endif;
endif;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0; 
multipop(EIP);
restore;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

SP=SP+1;
// Address Transaltion on the SP to find the stack address to which EIP is to be stored
[[[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16+14] + 2*(SP/512) ]*512 + (SP%512)] = EIP;
ireturn;
