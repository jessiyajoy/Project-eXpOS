// ----- Load in ------

// ----- Timer -------
loadi(4, 17);
loadi(5, 18);

// ----- Modules --------

// ---- module 5 ----
loadi(50,63);
loadi(51,64);

// ----- Library ------
loadi(63,13);
loadi(64,14);

// ----- Interrupts and Exeptions -------

// ----- INT7 -------
loadi(16,29);
loadi(17,30);

// ---- INT10 ----
loadi(22,35);
loadi(23,36);

// Exception Handler
loadi(2, 15);
loadi(3, 16);


// ----- Programs ------

// INIT PROG
loadi(65, 7);
loadi(66, 8);


// USER PROG (EVEN)

loadi(83, 69);

// User Prog2 (PRIMES)

loadi(92, 70);

// ------ Page Tables ------

// ----- Page Table INIT -------

// PID = 1
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";


// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// ----- Page Table USER ------
// PID = 2


PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 89;
[PTBR+5] = "0110";
[PTBR+6] = 90;
[PTBR+7] = "0110";


// Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 87;
[PTBR+17] = "0110";
[PTBR+18] = 88;
[PTBR+19] = "0110";


// ----- Page Table USER2 (PRIMES) -------

// PID = 3
PTBR = PAGE_TABLE_BASE + 60;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 98;
[PTBR+5] = "0110";
[PTBR+6] = 99;
[PTBR+7] = "0110";


// Code
[PTBR+8] = 92;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 96;
[PTBR+17] = "0110";
[PTBR+18] = 97;
[PTBR+19] = "0110";


// ------ Process Tables ----------

// ------ Process Table INIT -------

    // PID
    [PROCESS_TABLE + 16 + 1] = 1;
    // STATE Field
    [PROCESS_TABLE + 16 + 4] = CREATED;
    // UArea Page
    [PROCESS_TABLE + 16 + 11] = 80;
    //UPTR (Logical Address for Top of User Stack)
    [PROCESS_TABLE + 16 + 13] = 8 * 512;
    // KPTR
    [PROCESS_TABLE + 16 + 12] = 0; 
    // PTBR_field
    [PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
    // PTLR_field
    [PROCESS_TABLE + 16 + 15] = 10;


// ------ Process Table USER(EVEN) -------

    // PID
    [PROCESS_TABLE + 32 + 1] = 2;
    // STATE Field
    [PROCESS_TABLE + 32 + 4] = CREATED;
    // UArea Page
    [PROCESS_TABLE + 32 + 11] = 91;
    //UPTR (Logical Address for Top of User Stack)
    [PROCESS_TABLE + 32 + 13] = 8 * 512;
    // KPTR
    [PROCESS_TABLE + 32 + 12] = 0; 
    // PTBR_field
    [PROCESS_TABLE + 32 + 14] = PAGE_TABLE_BASE + 40;
    // PTLR_field
    [PROCESS_TABLE + 32 + 15] = 10;

// ------ Process Table USER2(PRIMES) -------

    // PID
    [PROCESS_TABLE + 48 + 1] = 3;
    // STATE Field
    [PROCESS_TABLE + 48 + 4] = CREATED;
    // UArea Page
    [PROCESS_TABLE + 48 + 11] = 100;
    //UPTR (Logical Address for Top of User Stack)
    [PROCESS_TABLE + 48 + 13] = 8 * 512;
    // KPTR
    [PROCESS_TABLE + 48 + 12] = 0; 
    // PTBR_field
    [PROCESS_TABLE + 48 + 14] = PAGE_TABLE_BASE + 60;
    // PTLR_field
    [PROCESS_TABLE + 48 + 15] = 10;


// ---- STATE field of other process table entries to TERMINATED ----
alias pidPro R0;
pidPro = 4;
while( pidPro < 16 ) do
    [PROCESS_TABLE + 16 * pidPro + 4] = TERMINATED;
    pidPro = pidPro + 1;
endwhile;


// ----- Entry Points ------- 
// ----- ENRTY POINT INIT -------
[76*512] = [65 * 512 + 1];
// ----- ENRTY POINT USER(EVEN)-------
[87*512] = [83 * 512 + 1];
// ----- ENRTY POINT USER2(PRIME)-------
[96*512] = [92 * 512 + 1];

return;