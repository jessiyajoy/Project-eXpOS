alias functionNum R1;
alias currentPID R2;

//Acquire Terminal
if( functionNum == 8 ) then
    while( [TERMINAL_STATUS_TABLE] == 1 ) do
        [ PROCESS_TABLE + 16*currentPID + 4 ] = WAIT_TERMINAL;
        multipush(R0, R1, R2);

        //call module 5
        call SCHEDULER;

        multipop(R0, R1, R2);
    endwhile ;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    breakpoint;
    return;
endif;

//Release Terminal
if( functionNum == 9 ) then
    // check if process trying to release terminal without acquiring it
    if( [TERMINAL_STATUS_TABLE + 1] != currentPID ) then
        R0 = -1;
        return;
    endif ;

    //Change STATE field in Terminal Status table (terminal released)
    [TERMINAL_STATUS_TABLE] = 0;

    //Update STATUS to READY for all processes (valid PID) with WAIT_TERMINAL status
    alias var R3;
    var = 1;
    while( var < 16 ) do
        alias processTable R4;
        processTable = PROCESS_TABLE + 16*var;
        if( [processTable + 1] != -1 && [processTable + 4] == WAIT_TERMINAL) then
            [processTable + 4] = READY;
        endif ;
        var = var + 1;
    endwhile ;

    R0 = 0;
    breakpoint;
    return;
endif;